@page "/CoreEngine"
@using GeoEngine
@inject IJSRuntime JSRuntime
@using System.Text


<h3>Graph Printer</h3>


<div class="main-container">
    <div class="canvas-container">
        <canvas id="graphCanvas" width=800px height=800px></canvas>
    </div>
    <div class="control-panel">
        <div class="code-input">
            <textarea id="codeInput" @bind="codeText"></textarea>
        </div>
        <div class="console-output">
            <div id="consoleOutput" class="error-output">
                @* @(consoleText.Split('\n').Select(line => new MarkupString($"{line}<br />"))) *@
                @((MarkupString)consoleText)
            </div>
        </div>
        <div class="buttons">
            <div class="save-container">
                <input type="text" @bind="filename" placeholder="Input file name." />
                <button @onclick="SaveCode">Save</button>
            </div>
            <button @onclick="LoadCode">Load</button>
            <button @onclick="CompileCode">Compile</button>
        </div>
    </div>
</div>



<style>
    .main-container {
        display: flex;
        height: 100vh;
        color: white;
        background-color: #333333;
    }

    .canvas-container {
        flex: 1;
        padding: 10px;
    }

    #graphCanvas {
        width: 100%;
        height: 100%;
    }

    .control-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 10px;
    }

    .code-input,
    .console-output {
        flex: 1;
        margin-bottom: 10px;

        border-radius: 15px;
    }

    .code-input {
        flex: 3;
        /* Toma 3 partes del espacio disponible */
    }

    .console-output {
        flex: 1;
        /* Toma 1 parte del espacio disponible */
    }

    textarea {
        width: 100%;
        height: 100%;
        background-color: #222;
        color: white;
        border: none;
        padding: 10px;
        resize: none;
        border-radius: 15px;
    }

    .buttons button {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #555;
        color: white;
        border: none;
        cursor: pointer;

        border-radius: 15px;
    }

    .buttons button:hover {
        background-color: #666;
    }

    .save-container {
        display: flex;
        width: 100%;
        /* Ajusta el ancho según tus necesidades */
    }

    .save-container input,
    .save-container button {
        flex: 1;
        /* Ambos elementos ocuparán la misma cantidad de espacio */
        padding: 10px;
        /* Ajuste para comodidad visual y táctil */
        font-size: 16px;
        /* Ajuste para una apariencia uniforme */

        border-radius: 15px;
    }

    .save-container input {
        height: 100%;
        margin-right: 5px;
        background-color: #333;
        color: white;
    }

    .save-container button {
        cursor: pointer;
    }

    .error-output {
        width: 100%;
        height: 100%;
        overflow: auto;
        padding: 10px;
        background-color: #222;
        color: white;
        border: 1px solid #555;

        border-radius: 15px;
    }

    .error-output span {
        color: red;
    }
</style>

@code {
    private string codeText;
    private string consoleText;
    private string filename = "";

    private async Task SaveCode()
    {
        if (string.IsNullOrWhiteSpace(filename))
        {
            consoleText = "Error 404: Not file name founded";
            return;
        }

        await JSRuntime.InvokeVoidAsync("saveAsFile", filename + ".txt", codeText);
    }

    private void LoadCode()
    {
        // Logic to load text from a file to codeText
    }


    //canvas limits x:691 y:741
    private async Task CompileCode()
    {
        //clear console
        consoleText = string.Empty;
        string compilationErrors = "";
        string consoleLogs = "";

        //clear logs
        DrawEngine.ClearLogs();

        //clear canvas
        await JSRuntime.InvokeVoidAsync("clearCanvas", "graphCanvas");

        @* Principal.Text = codeText; *@
        DrawEngine.Text = codeText;
        try
        {
            DrawEngine.DrawMotor(JSRuntime);
            @* Principal.Principal2(JSRuntime); *@
            DrawEngine.UpdateLogs();
            consoleLogs = DrawEngine.Logs;
            consoleText += $"<span style=\"color: white;\">{consoleLogs}</span><br/>";
        }
        catch (Exception ex)
        {
            DrawEngine.UpdateLogs();
            consoleLogs = DrawEngine.Logs;
            consoleText += $"<span style=\"color: white;\">{consoleLogs}</span><br/>";
            DrawEngine.UpdateErrors();
            compilationErrors = DrawEngine.ErrorMessage;
            consoleText += $"<span style=\"color: red;\">{compilationErrors}</span><br/>";
            Console.WriteLine(compilationErrors);

            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("resizeCanvas", "graphCanvas");
        }
    }
}