@page "/CoreEngine"
@using GeoEngine
@inject IJSRuntime JSRuntime
@using System.Text


<h3>Graph Printer</h3>


<div class="main-container">
    <div class="canvas-container">
        <canvas id="graphCanvas" width=800px height=800px></canvas>
    </div>
    <div class="control-panel">
        <div class="code-input">
            <textarea id="lineNumbers" @ref="lineNumbersTextArea" readonly></textarea>
            <textarea id="codeInput" @ref="codeTextArea" @bind="codeText" @oninput="UpdateLineNumbers"></textarea>
        </div>
        <div class="console-output">
            <div id="consoleOutput" class="error-output">
                @* @(consoleText.Split('\n').Select(line => new MarkupString($"{line}<br />"))) *@
                @((MarkupString)consoleText)
            </div>
        </div>
        <div class="buttons">
            <div class="save-container">
                <input type="text" @bind="filename" placeholder="Input file name." />
                <button @onclick="SaveCode">Save</button>
            </div>
            <button @onclick="LoadCode">Load</button>
            <button @onclick="CompileCode">Compile</button>
        </div>
    </div>
</div>


@code {
    private ElementReference lineNumbersTextArea;
    private ElementReference codeTextArea;
    private string codeText;
    private string consoleText;
    private string filename = "";

    private async Task SaveCode()
    {
        if (string.IsNullOrWhiteSpace(filename))
        {
            consoleText = "Error 404: Not file name founded";
            return;
        }

        await JSRuntime.InvokeVoidAsync("saveAsFile", filename + ".txt", codeText);
    }

    private void LoadCode()
    {
        // Logic to load text from a file to codeText
    }


    //canvas limits x:691 y:741
    private async Task CompileCode()
    {
        //clear console
        consoleText = string.Empty;
        string compilationErrors = "";
        string consoleLogs = "";

        //clear logs
        DrawEngine.ClearLogs();

        //clear canvas
        await JSRuntime.InvokeVoidAsync("clearCanvas", "graphCanvas");

        @* Principal.Text = codeText; *@
        DrawEngine.Text = codeText;
        try
        {
            DrawEngine.DrawMotor(JSRuntime);
            @* Principal.Principal2(JSRuntime); *@
            DrawEngine.UpdateLogs();
            consoleLogs = DrawEngine.Logs;
            consoleText += $"<span style=\"color: white;\">{consoleLogs}</span><br />";
        }
        catch (Exception ex)
        {
            DrawEngine.UpdateLogs();
            consoleLogs = DrawEngine.Logs;
            consoleText += $"<span style=\"color: white;\">{consoleLogs}</span><br />";
            DrawEngine.UpdateErrors();
            compilationErrors = DrawEngine.ErrorMessage;
            consoleText += $"<span style=\"color: red;\">{compilationErrors}</span><br />";
            Console.WriteLine(compilationErrors);

            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("resizeCanvas", "graphCanvas");
            await JSRuntime.InvokeVoidAsync("syncScroll", lineNumbersTextArea, codeTextArea);
        }
    }

    private async Task UpdateLineNumbers(ChangeEventArgs e)
    {
        var codeLines = e.Value.ToString().Split('\n');
        var lineNumbers = string.Join("\n", Enumerable.Range(1, codeLines.Length));
        await JSRuntime.InvokeVoidAsync("updateTextAreaValue", lineNumbersTextArea, lineNumbers);
    }
}