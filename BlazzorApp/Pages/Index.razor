@page "/"
@using GeoEngine
@inject IJSRuntime JSRuntime
@using System.Text


<h3>Graph Printer</h3>


<div class="main-container">
    <div class="canvas-container">
        <canvas id="graphCanvas" width=100% height=100%></canvas>
        @* <button @onclick="DrawArcBetweenPoints2">Dibuja Línea</button> *@
    </div>
    <div class="control-panel">
        <div class="code-input">
            <textarea id="codeInput" @bind="codeText"></textarea>
        </div>
        <div class="console-output">
            <textarea id="consoleOutput" readonly @bind="consoleText"></textarea>
        </div>
        <div class="buttons">
            <div class="save-container">
                <input type="text" @bind="filename" placeholder="Input file name." />
                <button @onclick="SaveCode">Save</button>
            </div>
            <button @onclick="LoadCode">Load</button>
            <button @onclick="CompileCode">Compile</button>
        </div>
    </div>
</div>



<style>
    .main-container {
        display: flex;
        height: 100vh;
        color: white;
        background-color: #333;
    }

    .canvas-container {
        flex: 1;
        padding: 10px;
    }

    #graphCanvas {
        width: 100%;
        height: 100%;
    }

    .control-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 10px;
    }

    .code-input,
    .console-output {
        flex: 1;
        margin-bottom: 10px;
    }

    .code-input {
        flex: 3;
        /* Toma 3 partes del espacio disponible */
    }

    .console-output {
        flex: 1;
        /* Toma 1 parte del espacio disponible */
    }

    textarea {
        width: 100%;
        height: 100%;
        background-color: #222;
        color: white;
        border: none;
        padding: 10px;
        resize: none;
    }

    .buttons button {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #555;
        color: white;
        border: none;
        cursor: pointer;
    }

    .buttons button:hover {
        background-color: #666;
    }

    .save-container {
        display: flex;
        width: 100%;
        /* Ajusta el ancho según tus necesidades */
    }

    .save-container input,
    .save-container button {
        flex: 1;
        /* Ambos elementos ocuparán la misma cantidad de espacio */
        padding: 10px;
        /* Ajuste para comodidad visual y táctil */
        font-size: 16px;
        /* Ajuste para una apariencia uniforme */
    }

    .save-container input {
        height: 100%;
        margin-right: 5px;
        background-color: #333;
        color: white;
    }

    .save-container button {
        cursor: pointer;
    }
</style>

@code {
    private string codeText;
    private string consoleText;
    private string filename = "";

    private async Task SaveCode()
    {
        if (string.IsNullOrWhiteSpace(filename))
        {
            consoleText = "Input file name.";
            return;
        }

        await JSRuntime.InvokeVoidAsync("saveAsFile", filename + ".txt", codeText);
    }

    private void LoadCode()
    {
        // Logic to load text from a file to codeText
    }


    private void CompileCode()
    {
        @* Principal.Text = codeText;
        try
        {
            Principal.Principal2(JSRuntime);
        }
        catch (Exception ex)
        {

        } *@
    }

    //limits x:691 y:741
    private async Task DrawLine()
    {
        await JSRuntime.InvokeVoidAsync("drawLine", "graphCanvas", 100, 100, 500, 500, "yellow");
    }

    private async Task DrawPoint()
    {
        await JSRuntime.InvokeVoidAsync("drawPoint", "graphCanvas", 500, 500, "white", 3);
    }

    private async Task DrawPoint1()
    {
        await JSRuntime.InvokeVoidAsync("drawPoint", "graphCanvas", 100, 100, "red", 3);
    }

    private async Task DrawPoint2()
    {
        await JSRuntime.InvokeVoidAsync("drawPoint", "graphCanvas", 30, 120, "red", 3);
    }

    private async Task DrawPoint3()
    {
        await JSRuntime.InvokeVoidAsync("drawPoint", "graphCanvas", 200, 100, "red", 3);
    }

    private async Task DrawCircle()
    {
        await JSRuntime.InvokeVoidAsync("drawCircle", "graphCanvas", 100, 100, 100, "blue");
    }

    private async Task DrawCircleOutline()
    {
        await JSRuntime.InvokeVoidAsync("drawCircleOutline", "graphCanvas", 100, 100, 100, "blue", 2);
    }

    private async Task DrawLineThroughPoints()
    {
        // Por ejemplo, traza una recta que pase por los puntos (50, 50) y (150, 150) y se extienda hasta los bordes del canvas,
        // con color azul y ancho de línea 2.
        await JSRuntime.InvokeVoidAsync("drawLineThroughPoints", "graphCanvas", 100, 100, 500, 500, "blue", 2);
    }

    private async Task DrawRayThroughPoints()
    {
        // Por ejemplo, traza una semirrecta que comienza en los puntos (50, 50) y pasa por (150, 150),
        // y se extiende hasta el final del canvas, con color rojo y ancho de línea 2.
        await JSRuntime.InvokeVoidAsync("drawRayThroughPoints", "graphCanvas", 100, 100, 500, 500, "red", 2);
    }

    private async Task DrawArcBetweenPoints()
    {
        // Por ejemplo, traza un arco desde el centro (100, 100) hasta los puntos (150, 50) y (200, 100),
        // con un radio de 50, color verde y ancho de línea 2.
        DrawPoint1();
        DrawPoint2();
        DrawPoint3();
        await JSRuntime.InvokeVoidAsync("drawArcBetweenPoints", "graphCanvas", 100, 100, 30, 120, 200, 100, 50, "blue", 2);
    }

    private async Task DrawArcBetweenPoints2()
    {
        // Por ejemplo, traza un arco desde el centro (100, 100) hasta los puntos (150, 50) y (200, 100),
        // con un radio de 50, color verde y ancho de línea 2.
        await JSRuntime.InvokeVoidAsync("drawLabeledPoint", "graphCanvas", 100, 100, "Punto A", "red", 3);
        await JSRuntime.InvokeVoidAsync("drawLabeledPoint", "graphCanvas", 150, 50, "Punto B", "red", 3);
        await JSRuntime.InvokeVoidAsync("drawLabeledPoint", "graphCanvas", 200, 100, "Punto C", "red", 3);
        await JSRuntime.InvokeVoidAsync("drawArcBetweenPoints", "graphCanvas", 100, 100, 150, 50, 200, 100, 50, "green", 2);
    }

    private async Task DrawLabeledPoint()
    {
        // Por ejemplo, dibuja un punto en (100, 100), con la etiqueta "Punto A", color rojo y radio de 5.
        await JSRuntime.InvokeVoidAsync("drawLabeledPoint", "graphCanvas", 100, 100, "Punto A", "red", 3);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("resizeCanvas", "graphCanvas");
        }
    }
}